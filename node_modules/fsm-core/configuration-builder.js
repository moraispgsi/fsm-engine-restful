/**
 * Created by Ricardo Morais on 10/03/2017.
 */

let config = {
    initialState: "uninitialized",
    states: {
       uninitialized: {}
    },
    transitions: {}

};
let scxmlbuilder = {

    setInitialState: (state) => {
        config['initialState'] = state;
        return scxmlbuilder;
    },
    addState: (state) => {
        config.states[state] = {};
        return scxmlbuilder;
    },
    removeState: (state) => {
        delete config.states[state];
        return scxmlbuilder;
    },
    addTransition: (fromState, toState, input) => {
        if(config.transitions[fromState] === void 0) {
            config.transitions[fromState] = [];
        }
        config.transitions[fromState].push({
            fromState: fromState,
            toState: toState,
            input: input
        });
        return scxmlbuilder;
    },
    onTransition: (state, input, actionCall) => {

    },
    onEnter: (state, actionCall) => {
        if (config.states[state] == void 0) {
            console.log('State not found');
        }
        config.states[state]['_onEnter'] = "this."+actionCall;
        return scxmlbuilder;
    },
    onExit: (state, actionCall) => {
        if (config.states[state] == void 0) {
            console.log('State not found');
        }
        config.states[state]['_onExit'] = "this."+actionCall;
        return scxmlbuilder;
    },
    build: (opt) => {

        let builder = require('xmlbuilder');
        let built = builder.begin().ele("scxml", {
            xmlns: "http://www.w3.org/2005/07/scxml",
            version: "1.0",
            profile: "ecmascript",
            initial: config.initialState
        });

        built.ele("datamodel").ele("data",{id: "context", expr: "{}"}).up().up();

        for (let keyState in config.states) {

            built = built.ele("state", {id: keyState});
            for (let keyInput in config.states[keyState]) {
                switch(keyInput){
                    case "_onEnter":
                        built = built.ele("onentry");
                        built = built.ele("script");
                        built = built.text(config.states[keyState][keyInput]);
                        built = built.up().up();
                        break;
                    case "_onExit":
                        built = built.ele("onexit");
                        built = built.ele("script");
                        built = built.text(config.states[keyState][keyInput]);
                        built = built.up().up();
                        break;
                }

                if(!config.transitions[keyState]) {
                    continue;
                }

                for (let transition of config.transitions[keyState]){
                    built = built.ele("transition",{
                        event: transition.input,
                        target: transition.toState
                    });
                    built = built.up();
                }
            }
            built = built.up();
        }

        return built.end(opt);
    }
};

module.exports = scxmlbuilder;






