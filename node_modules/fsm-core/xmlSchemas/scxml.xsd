<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema elementFormDefault="qualified" targetNamespace="http://www.w3.org/2005/07/scxml"
    xmlns="http://www.w3.org/2005/07/scxml" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <xsd:annotation>
        <xsd:documentation>    This is the XML Schema driver for SCXML 1.0.    Please use this
            namespace for SCXML 1.0 elements:     "http://www.w3.org/2005/07/scxml"    </xsd:documentation>
        <xsd:documentation source="scxml-copyright.xsd"/>
    </xsd:annotation>
    <xsd:annotation>
        <xsd:documentation>    This is the XML Schema driver file for SCXML 1.0.     This schema:
            + sets the namespace for SCXML 1.0    + imports external schemas (xml.xsd)    + imports
            SCXML common datatypes, attributes and content models    + imports modular schemas
            SCXML 1.0 includes:    + SCXML core constructs    + SCXML executable content    + SCXML
            data model and manipulation    + SCXML external communications     This schema is
            permissive such that it accomodates all    datamodels, but validating documents may
            contain markup that    is ignored in certain datamodels.   </xsd:documentation>
    </xsd:annotation>
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" schemaLocation="file_0.xsd">
        <xsd:annotation>
            <xsd:documentation>     This import brings in the XML namespace attributes     The XML
                attributes are used by various modules.    </xsd:documentation>
        </xsd:annotation>
    </xsd:import>
    <xsd:annotation>
        <xsd:documentation>         This is the XML Schema core module for SCXML         * scxml
            * state          * initial          * onexit         * onentry          * transition
            * parallel         * final          * history          * donedata         * if         *
            elsif         * else         * foreach         * raise         * log         The core
            module defines these elements and the         attributes.         </xsd:documentation>
        <xsd:documentation source="scxml-copyright.xsd"/>
    </xsd:annotation>
    <xsd:annotation>
        <xsd:documentation>         XML Schema datatypes for SCXML          Defines containers for
            the SCXML datatypes, many of these         imported from other specifications and
            standards.    </xsd:documentation>
        <xsd:documentation source="scxml-copyright.xsd"/>
    </xsd:annotation>
    <xsd:simpleType name="Exmode.datatype">
        <xsd:annotation>
            <xsd:documentation>             Describes the processor execution mode for this
                document, being             either "lax" or "strict".         </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:NMTOKEN">
            <xsd:enumeration value="lax"/>
            <xsd:enumeration value="strict"/>
        </xsd:restriction>
    </xsd:simpleType>
    <xsd:simpleType name="Binding.datatype">
        <xsd:annotation>
            <xsd:documentation>             The binding type in use for the SCXML document.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:NMTOKEN">
            <xsd:enumeration value="early"/>
            <xsd:enumeration value="late"/>
        </xsd:restriction>
    </xsd:simpleType>
    <xsd:simpleType name="HistoryType.datatype">
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="shallow"/>
            <xsd:enumeration value="deep"/>
        </xsd:restriction>
    </xsd:simpleType>
    <xsd:simpleType name="TransitionType.datatype">
        <xsd:annotation>
            <xsd:documentation>             The type of the transition i.e. internal or external.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:NMTOKEN">
            <xsd:enumeration value="internal"/>
            <xsd:enumeration value="external"/>
        </xsd:restriction>
    </xsd:simpleType>
    <xsd:simpleType name="Boolean.datatype">
        <xsd:annotation>
            <xsd:documentation>             Boolean: true or false only    </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:NMTOKENS">
            <xsd:enumeration value="true"/>
            <xsd:enumeration value="false"/>
        </xsd:restriction>
    </xsd:simpleType>
    <xsd:simpleType name="AssignType.datatype">
        <xsd:annotation>
            <xsd:documentation>             The assign type that allows for precise manipulation of
                the             datamodel location. Types are:                  replacechildren
                (default),                  firstchild, lastchild,                  previoussibling,
                nextsibling,                  replace, delete,                  addattribute
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:NMTOKEN">
            <xsd:enumeration value="replacechildren"/>
            <xsd:enumeration value="firstchild"/>
            <xsd:enumeration value="lastchild"/>
            <xsd:enumeration value="previoussibling"/>
            <xsd:enumeration value="nextsibling"/>
            <xsd:enumeration value="replace"/>
            <xsd:enumeration value="delete"/>
            <xsd:enumeration value="addattribute"/>
        </xsd:restriction>
    </xsd:simpleType>
    <xsd:simpleType name="URI.datatype">
        <xsd:annotation>
            <xsd:documentation>             The xsd:anyURI type and thus URI references in SCXML
                documents may contain a wide array of international             characters.
                Implementers should reference RFC 3987 and             the "Character Model for the
                World Wide Web 1.0:             Resource Identifiers" in order to provide
                appropriate             support for these characters in VoiceXML documents and
                when processing values of this type or mapping them to             URIs.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:anyURI"/>
    </xsd:simpleType>
    <xsd:simpleType name="Integer.datatype">
        <xsd:annotation>
            <xsd:documentation>Non-negative integer</xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:nonNegativeInteger"/>
    </xsd:simpleType>
    <xsd:simpleType name="Duration.datatype">
        <xsd:annotation>
            <xsd:documentation>             Duration allowing positive values ranging from
                milliseconds             to days.     </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
            <xsd:pattern value="\d*(\.\d+)?(ms|s|m|h|d)"/>
        </xsd:restriction>
    </xsd:simpleType>
    <xsd:simpleType name="EventType.datatype">
        <xsd:annotation>
            <xsd:documentation>             EventType is the name of an event.             Example
                legal values:              foo              foo.bar              foo.bar.baz
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:token">
            <xsd:pattern value="(\i|\d|\-)+(\.(\i|\d|\-)+)*"/>
        </xsd:restriction>
    </xsd:simpleType>
    <xsd:simpleType name="EventTypes.datatype">
        <xsd:annotation>
            <xsd:documentation>    Custom datatype for the event attribute in SCXML based on
                xsd:token.    Example legal values:     *     foo     foo.bar     foo.*
                foo.bar.*     foo bar baz     foo.bar bar.* baz.foo.*
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:token">
            <xsd:pattern
                value="\.?\*|(\i|\d|\-)+(\.(\i|\d|\-)+)*(\.\*)?(\s(\i|\d|\-)+(\.(\i|\d|\-)+)*(\.\*)?)*"
            />
        </xsd:restriction>
    </xsd:simpleType>
    <!-- Defines the  default CondLang datatype.        -->
    <xsd:simpleType name="CondLang.datatype">
        <xsd:annotation>
            <xsd:documentation>       Conditional language is expression        which must evaluate
                to Boolean True or False.        The expression language must define In(stateID)
                as a valid expression.             </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:string"/>
    </xsd:simpleType>
    <!-- Defines the  default LocLang datatype.         -->
    <xsd:simpleType name="LocLang.datatype">
        <xsd:annotation>
            <xsd:documentation>          Location language is expression       identifying a
                location in the datamodel.            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:string"/>
    </xsd:simpleType>
    <!-- Defines the default ValueLang datatype.       -->
    <xsd:simpleType name="ValueLang.datatype">
        <xsd:annotation>
            <xsd:documentation>       Value language is expression       return a value.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:string"/>
    </xsd:simpleType>
    <xsd:annotation>
        <xsd:documentation>   This is the XML Schema common attributes for SCXML   </xsd:documentation>
        <xsd:documentation source="scxml-copyright.xsd"/>
    </xsd:annotation>
    <xsd:attributeGroup name="Fetchtimeout.attrib">
        <xsd:annotation>
            <xsd:documentation>Used in Cache.attribs</xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="fetchtimeout" type="Duration.datatype"/>
    </xsd:attributeGroup>
    <xsd:attributeGroup name="Maxage.attrib">
        <xsd:annotation>
            <xsd:documentation>Used in Cache.attribs</xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="maxage" type="Integer.datatype"/>
    </xsd:attributeGroup>
    <xsd:attributeGroup name="Maxstale.attrib">
        <xsd:annotation>
            <xsd:documentation>Used in Cache attribs</xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="maxstale" type="Integer.datatype"/>
    </xsd:attributeGroup>
    <xsd:attributeGroup name="Cache.attribs">
        <xsd:annotation>
            <xsd:documentation>Cache attributes to control caching behavior</xsd:documentation>
        </xsd:annotation>
        <xsd:attributeGroup ref="Fetchtimeout.attrib"/>
        <xsd:attributeGroup ref="Maxage.attrib"/>
        <xsd:attributeGroup ref="Maxstale.attrib"/>
    </xsd:attributeGroup>
    <xsd:annotation>
        <xsd:documentation>          XML Schema content models for SCXML          *
            scxml.extra.content           * content          * scxml.extra.attribs          Defines
            SCXML shared content models.         </xsd:documentation>
        <xsd:documentation source="scxml-copyright.xsd"/>
    </xsd:annotation>
    <xsd:attributeGroup name="scxml.extra.attribs">
        <xsd:annotation>
            <xsd:documentation>group allowing attributes from other namespaces</xsd:documentation>
        </xsd:annotation>
        <xsd:anyAttribute namespace="##other" processContents="lax"/>
    </xsd:attributeGroup>
    <xsd:group name="scxml.extra.content">
        <xsd:annotation>
            <xsd:documentation>     group allowing elements from other namespaces
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:any maxOccurs="unbounded" minOccurs="0" namespace="##other" processContents="lax"/>
        </xsd:sequence>
    </xsd:group>
    <!-- scxml -->
    <xsd:attributeGroup name="scxml.scxml.attlist">
        <xsd:attribute name="initial" type="xsd:IDREFS"/>
        <xsd:attribute name="name" type="xsd:NMTOKEN"/>
        <xsd:attribute fixed="1.0" name="version" type="xsd:decimal" use="required"/>
        <xsd:attribute default="null" name="datamodel" type="xsd:NMTOKEN" use="optional"/>
        <xsd:attribute name="binding" type="Binding.datatype"/>
        <xsd:attribute name="exmode" type="Exmode.datatype"/>
        <xsd:attributeGroup ref="scxml.extra.attribs"/>
    </xsd:attributeGroup>
    <xsd:group name="scxml.scxml.mix">
        <xsd:choice>
            <xsd:element maxOccurs="unbounded" minOccurs="0" ref="state"/>
            <xsd:element maxOccurs="unbounded" minOccurs="0" ref="parallel"/>
            <xsd:element maxOccurs="unbounded" minOccurs="0" ref="final"/>
            <xsd:element maxOccurs="unbounded" minOccurs="0" ref="datamodel"/>
            <xsd:element maxOccurs="unbounded" minOccurs="0" ref="script"/>
            <xsd:group maxOccurs="unbounded" minOccurs="0" ref="scxml.extra.content"/>
        </xsd:choice>
    </xsd:group>
    <xsd:group name="scxml.scxml.content">
        <xsd:sequence>
            <xsd:group maxOccurs="unbounded" minOccurs="0" ref="scxml.scxml.mix"/>
        </xsd:sequence>
    </xsd:group>
    <xsd:complexType name="scxml.scxml.type">
        <xsd:group ref="scxml.scxml.content"/>
        <xsd:attributeGroup ref="scxml.scxml.attlist"/>
    </xsd:complexType>
    <xsd:element name="scxml" type="scxml.scxml.type"/>
    <!-- state -->
    <xsd:attributeGroup name="scxml.state.attlist">
        <xsd:attribute name="id" type="xsd:ID"/>
        <xsd:attribute name="initial" type="xsd:IDREFS"/>
        <xsd:attributeGroup ref="scxml.extra.attribs"/>
    </xsd:attributeGroup>
    <xsd:group name="scxml.state.mix">
        <xsd:choice>
            <xsd:element maxOccurs="unbounded" minOccurs="0" ref="onentry"/>
            <xsd:element maxOccurs="unbounded" minOccurs="0" ref="onexit"/>
            <xsd:element maxOccurs="unbounded" minOccurs="0" ref="transition"/>
            <xsd:element maxOccurs="1" minOccurs="0" ref="initial"/>
            <xsd:element maxOccurs="unbounded" minOccurs="0" ref="state"/>
            <xsd:element maxOccurs="unbounded" minOccurs="0" ref="parallel"/>
            <xsd:element maxOccurs="unbounded" minOccurs="0" ref="final"/>
            <xsd:element maxOccurs="unbounded" minOccurs="0" ref="history"/>
            <xsd:element maxOccurs="1" minOccurs="0" ref="datamodel"/>
            <xsd:element maxOccurs="unbounded" minOccurs="0" ref="invoke"/>
            <xsd:group maxOccurs="unbounded" minOccurs="0" ref="scxml.extra.content"/>
        </xsd:choice>
    </xsd:group>
    <xsd:group name="scxml.state.content">
        <xsd:sequence>
            <xsd:group maxOccurs="unbounded" minOccurs="0" ref="scxml.state.mix"/>
        </xsd:sequence>
    </xsd:group>
    <xsd:complexType name="scxml.state.type">
        <xsd:sequence>
            <xsd:group ref="scxml.state.content"/>
        </xsd:sequence>
        <xsd:attributeGroup ref="scxml.state.attlist"/>
    </xsd:complexType>
    <xsd:element name="state" type="scxml.state.type"/>
    <!-- initial -->
    <xsd:attributeGroup name="scxml.initial.attlist">
        <xsd:attributeGroup ref="scxml.extra.attribs"/>
    </xsd:attributeGroup>
    <xsd:group name="scxml.initial.content">
        <xsd:sequence>
            <xsd:group maxOccurs="unbounded" minOccurs="0" ref="scxml.extra.content"/>
            <xsd:element maxOccurs="1" minOccurs="1" ref="transition"/>
            <xsd:group maxOccurs="unbounded" minOccurs="0" ref="scxml.extra.content"/>
        </xsd:sequence>
    </xsd:group>
    <xsd:complexType name="scxml.initial.type">
        <xsd:group ref="scxml.initial.content"/>
        <xsd:attributeGroup ref="scxml.initial.attlist"/>
    </xsd:complexType>
    <xsd:element name="initial" type="scxml.initial.type"/>
    <!-- onentry -->
    <xsd:attributeGroup name="scxml.onentry.attlist">
        <xsd:attributeGroup ref="scxml.extra.attribs"/>
    </xsd:attributeGroup>
    <xsd:group name="scxml.onentry.content">
        <xsd:sequence>
            <xsd:group maxOccurs="unbounded" minOccurs="0" ref="scxml.core.executablecontent"/>
        </xsd:sequence>
    </xsd:group>
    <xsd:complexType name="scxml.onentry.type">
        <xsd:group ref="scxml.onentry.content"/>
        <xsd:attributeGroup ref="scxml.onentry.attlist"/>
    </xsd:complexType>
    <xsd:element name="onentry" type="scxml.onentry.type"/>
    <!-- onexit -->
    <xsd:attributeGroup name="scxml.onexit.attlist">
        <xsd:attributeGroup ref="scxml.extra.attribs"/>
    </xsd:attributeGroup>
    <xsd:group name="scxml.onexit.content">
        <xsd:sequence>
            <xsd:group maxOccurs="unbounded" minOccurs="0" ref="scxml.core.executablecontent"/>
        </xsd:sequence>
    </xsd:group>
    <xsd:complexType name="scxml.onexit.type">
        <xsd:group ref="scxml.onexit.content"/>
        <xsd:attributeGroup ref="scxml.onexit.attlist"/>
    </xsd:complexType>
    <xsd:element name="onexit" type="scxml.onexit.type"/>
    <!-- transition -->
    <xsd:attributeGroup name="scxml.transition.attlist">
        <xsd:attribute name="event" type="EventTypes.datatype"/>
        <xsd:attribute name="cond" type="CondLang.datatype"/>
        <xsd:attribute name="target" type="xsd:IDREFS"/>
        <xsd:attribute name="type" type="TransitionType.datatype"/>
        <xsd:attributeGroup ref="scxml.extra.attribs"/>
    </xsd:attributeGroup>
    <xsd:group name="scxml.transition.content">
        <xsd:sequence>
            <xsd:group maxOccurs="unbounded" minOccurs="0" ref="scxml.core.executablecontent"/>
        </xsd:sequence>
    </xsd:group>
    <xsd:complexType name="scxml.transition.type">
        <xsd:group ref="scxml.transition.content"/>
        <xsd:attributeGroup ref="scxml.transition.attlist"/>
    </xsd:complexType>
    <xsd:element name="transition" type="scxml.transition.type"/>
    <!-- parallel -->
    <xsd:attributeGroup name="scxml.parallel.attlist">
        <xsd:attribute name="id" type="xsd:ID"/>
        <xsd:attributeGroup ref="scxml.extra.attribs"/>
    </xsd:attributeGroup>
    <xsd:group name="scxml.parallel.mix">
        <xsd:choice>
            <xsd:element maxOccurs="unbounded" minOccurs="0" ref="onentry"/>
            <xsd:element maxOccurs="unbounded" minOccurs="0" ref="onexit"/>
            <xsd:element maxOccurs="unbounded" minOccurs="0" ref="transition"/>
            <xsd:element maxOccurs="unbounded" minOccurs="0" ref="state"/>
            <xsd:element maxOccurs="unbounded" minOccurs="0" ref="parallel"/>
            <xsd:element maxOccurs="unbounded" minOccurs="0" ref="history"/>
            <xsd:element maxOccurs="1" minOccurs="0" ref="datamodel"/>
            <xsd:element maxOccurs="unbounded" minOccurs="0" ref="invoke"/>
            <xsd:group maxOccurs="unbounded" minOccurs="0" ref="scxml.extra.content"/>
        </xsd:choice>
    </xsd:group>
    <xsd:group name="scxml.parallel.content">
        <xsd:sequence>
            <xsd:group maxOccurs="unbounded" minOccurs="0" ref="scxml.parallel.mix"/>
        </xsd:sequence>
    </xsd:group>
    <xsd:complexType name="scxml.parallel.type">
        <xsd:group ref="scxml.parallel.content"/>
        <xsd:attributeGroup ref="scxml.parallel.attlist"/>
    </xsd:complexType>
    <xsd:element name="parallel" type="scxml.parallel.type"/>
    <!-- final -->
    <xsd:attributeGroup name="scxml.final.attlist">
        <xsd:attribute name="id" type="xsd:ID"/>
        <xsd:attributeGroup ref="scxml.extra.attribs"/>
    </xsd:attributeGroup>
    <xsd:group name="scxml.final.mix">
        <xsd:choice>
            <xsd:element maxOccurs="unbounded" minOccurs="0" ref="onentry"/>
            <xsd:element maxOccurs="unbounded" minOccurs="0" ref="onexit"/>
            <xsd:element maxOccurs="1" minOccurs="0" ref="donedata"/>
            <xsd:group maxOccurs="unbounded" minOccurs="0" ref="scxml.extra.content"/>
        </xsd:choice>
    </xsd:group>
    <xsd:group name="scxml.final.content">
        <xsd:sequence>
            <xsd:group maxOccurs="unbounded" minOccurs="0" ref="scxml.final.mix"/>
        </xsd:sequence>
    </xsd:group>
    <xsd:complexType name="scxml.final.type">
        <xsd:group ref="scxml.final.content"/>
        <xsd:attributeGroup ref="scxml.final.attlist"/>
    </xsd:complexType>
    <xsd:element name="final" type="scxml.final.type"/>
    <!-- history -->
    <xsd:attributeGroup name="scxml.history.attlist">
        <xsd:attribute name="id" type="xsd:ID"/>
        <xsd:attribute name="type" type="HistoryType.datatype"/>
        <xsd:attributeGroup ref="scxml.extra.attribs"/>
    </xsd:attributeGroup>
    <xsd:group name="scxml.history.content">
        <xsd:sequence>
            <xsd:group maxOccurs="unbounded" minOccurs="0" ref="scxml.extra.content"/>
            <xsd:element maxOccurs="1" minOccurs="1" ref="transition"/>
            <xsd:group maxOccurs="unbounded" minOccurs="0" ref="scxml.extra.content"/>
        </xsd:sequence>
    </xsd:group>
    <xsd:complexType name="scxml.history.type">
        <xsd:group ref="scxml.history.content"/>
        <xsd:attributeGroup ref="scxml.history.attlist"/>
    </xsd:complexType>
    <xsd:element name="history" type="scxml.history.type"/>
    <!-- donedata -->
    <xsd:attributeGroup name="scxml.donedata.attlist">
        <xsd:attributeGroup ref="scxml.extra.attribs"/>
    </xsd:attributeGroup>
    <xsd:group name="scxml.donedata.content">
        <xsd:choice>
            <xsd:element maxOccurs="1" minOccurs="0" ref="content"/>
            <xsd:element maxOccurs="unbounded" minOccurs="0" ref="param"/>
        </xsd:choice>
    </xsd:group>
    <xsd:complexType name="scxml.donedata.type">
        <xsd:group ref="scxml.donedata.content"/>
        <xsd:attributeGroup ref="scxml.donedata.attlist"/>
    </xsd:complexType>
    <xsd:element name="donedata" type="scxml.donedata.type"/>
    <!-- if -->
    <xsd:attributeGroup name="scxml.if.attlist">
        <xsd:attribute name="cond" type="CondLang.datatype" use="required"/>
        <xsd:attributeGroup ref="scxml.extra.attribs"/>
    </xsd:attributeGroup>
    <xsd:group name="scxml.if.elseif.mix">
        <xsd:sequence>
            <xsd:element ref="elseif"/>
            <xsd:group maxOccurs="unbounded" minOccurs="0" ref="scxml.core.executablecontent"/>
        </xsd:sequence>
    </xsd:group>
    <xsd:group name="scxml.if.else.mix">
        <xsd:sequence>
            <xsd:element ref="else"/>
            <xsd:group maxOccurs="unbounded" minOccurs="0" ref="scxml.core.executablecontent"/>
        </xsd:sequence>
    </xsd:group>
    <xsd:group name="scxml.if.content">
        <xsd:sequence>
            <xsd:group maxOccurs="unbounded" minOccurs="0" ref="scxml.core.executablecontent"/>
            <xsd:group maxOccurs="1" minOccurs="0" ref="scxml.if.elseif.mix"/>
            <xsd:group maxOccurs="1" minOccurs="0" ref="scxml.if.else.mix"/>
        </xsd:sequence>
    </xsd:group>
    <xsd:complexType name="scxml.if.type">
        <xsd:group ref="scxml.if.content"/>
        <xsd:attributeGroup ref="scxml.if.attlist"/>
    </xsd:complexType>
    <xsd:element name="if" type="scxml.if.type"/>
    <!-- elseif -->
    <xsd:attributeGroup name="scxml.elseif.attlist">
        <xsd:attribute name="cond" type="CondLang.datatype" use="required"/>
        <xsd:attributeGroup ref="scxml.extra.attribs"/>
    </xsd:attributeGroup>
    <xsd:group name="scxml.elseif.mix">
        <xsd:choice>
            <!-- No content for this element -->
        </xsd:choice>
    </xsd:group>
    <xsd:group name="scxml.elseif.content">
        <xsd:sequence>
            <xsd:group maxOccurs="unbounded" minOccurs="0" ref="scxml.elseif.mix"/>
        </xsd:sequence>
    </xsd:group>
    <xsd:complexType name="scxml.elseif.type">
        <xsd:group ref="scxml.elseif.content"/>
        <xsd:attributeGroup ref="scxml.elseif.attlist"/>
    </xsd:complexType>
    <xsd:element name="elseif" type="scxml.elseif.type"/>
    <!-- else -->
    <xsd:attributeGroup name="scxml.else.attlist">
        <xsd:attributeGroup ref="scxml.extra.attribs"/>
    </xsd:attributeGroup>
    <xsd:group name="scxml.else.mix">
        <xsd:choice>
            <!-- No content for this element -->
        </xsd:choice>
    </xsd:group>
    <xsd:group name="scxml.else.content">
        <xsd:sequence>
            <xsd:group maxOccurs="unbounded" minOccurs="0" ref="scxml.else.mix"/>
        </xsd:sequence>
    </xsd:group>
    <xsd:complexType name="scxml.else.type">
        <xsd:group ref="scxml.else.content"/>
        <xsd:attributeGroup ref="scxml.else.attlist"/>
    </xsd:complexType>
    <xsd:element name="else" type="scxml.else.type"/>
    <!-- foreach -->
    <xsd:attributeGroup name="scxml.foreach.attlist">
        <xsd:attribute name="array" type="ValueLang.datatype" use="required"/>
        <xsd:attribute name="item" type="xsd:string" use="required"/>
        <xsd:attribute name="index" type="xsd:string"/>
        <xsd:attributeGroup ref="scxml.extra.attribs"/>
    </xsd:attributeGroup>
    <xsd:group name="scxml.foreach.content">
        <xsd:sequence>
            <xsd:group maxOccurs="unbounded" minOccurs="0" ref="scxml.core.executablecontent"/>
        </xsd:sequence>
    </xsd:group>
    <xsd:complexType name="scxml.foreach.type">
        <xsd:group ref="scxml.foreach.content"/>
        <xsd:attributeGroup ref="scxml.foreach.attlist"/>
    </xsd:complexType>
    <xsd:element name="foreach" type="scxml.foreach.type"/>
    <!-- raise -->
    <xsd:attributeGroup name="scxml.raise.attlist">
        <xsd:attribute name="event" type="xsd:NMTOKEN" use="required"/>
        <xsd:attributeGroup ref="scxml.extra.attribs"/>
    </xsd:attributeGroup>
    <xsd:group name="scxml.raise.mix">
        <xsd:choice>
            <!-- No content for this element -->
        </xsd:choice>
    </xsd:group>
    <xsd:group name="scxml.raise.content">
        <xsd:sequence>
            <xsd:group maxOccurs="unbounded" minOccurs="0" ref="scxml.raise.mix"/>
        </xsd:sequence>
    </xsd:group>
    <xsd:complexType name="scxml.raise.type">
        <xsd:group ref="scxml.raise.content"/>
        <xsd:attributeGroup ref="scxml.raise.attlist"/>
    </xsd:complexType>
    <xsd:element name="raise" type="scxml.raise.type"/>
    <!-- log -->
    <xsd:attributeGroup name="scxml.log.attlist">
        <xsd:attribute name="label" type="xsd:string"/>
        <xsd:attribute name="expr" type="ValueLang.datatype"/>
        <xsd:attributeGroup ref="scxml.extra.attribs"/>
    </xsd:attributeGroup>
    <xsd:group name="scxml.log.content">
        <xsd:sequence>
            <xsd:group maxOccurs="unbounded" minOccurs="0" ref="scxml.extra.content"/>
        </xsd:sequence>
    </xsd:group>
    <xsd:complexType name="scxml.log.type">
        <xsd:group ref="scxml.log.content"/>
        <xsd:attributeGroup ref="scxml.log.attlist"/>
    </xsd:complexType>
    <xsd:element name="log" type="scxml.log.type"/>
    <xsd:annotation>
        <xsd:documentation>             This is the XML Schema data module for SCXML             *
            datamodel              * data             * assign             * param             *
            script             * content             The data module defines these elements and
            their             attributes.         </xsd:documentation>
        <xsd:documentation source="scxml-copyright.xsd"/>
    </xsd:annotation>
    <!-- datamodel -->
    <xsd:attributeGroup name="scxml.datamodel.attlist">
        <xsd:attributeGroup ref="scxml.extra.attribs"/>
    </xsd:attributeGroup>
    <xsd:group name="scxml.datamodel.content">
        <xsd:sequence>
            <xsd:element maxOccurs="unbounded" minOccurs="0" ref="data"/>
            <xsd:group maxOccurs="unbounded" minOccurs="0" ref="scxml.extra.content"/>
        </xsd:sequence>
    </xsd:group>
    <xsd:complexType name="scxml.datamodel.type">
        <xsd:group ref="scxml.datamodel.content"/>
        <xsd:attributeGroup ref="scxml.datamodel.attlist"/>
    </xsd:complexType>
    <xsd:element name="datamodel" type="scxml.datamodel.type"/>
    <!-- data -->
    <xsd:attributeGroup name="scxml.data.attlist">
        <xsd:attribute name="id" type="xsd:ID" use="required"/>
        <xsd:attribute name="src" type="URI.datatype"/>
        <xsd:attribute name="expr" type="ValueLang.datatype"/>
        <xsd:attributeGroup ref="scxml.extra.attribs"/>
    </xsd:attributeGroup>
    <xsd:group name="scxml.data.content">
        <xsd:sequence>
            <xsd:any maxOccurs="unbounded" minOccurs="0" namespace="##any" processContents="lax"/>
        </xsd:sequence>
    </xsd:group>
    <xsd:complexType mixed="true" name="scxml.data.type">
        <xsd:group ref="scxml.data.content"/>
        <xsd:attributeGroup ref="scxml.data.attlist"/>
    </xsd:complexType>
    <xsd:element name="data" type="scxml.data.type"/>
    <!-- param -->
    <xsd:attributeGroup name="scxml.param.attlist">
        <xsd:attribute name="name" type="xsd:NMTOKEN" use="required"/>
        <xsd:attribute name="expr" type="ValueLang.datatype"/>
        <xsd:attribute name="location" type="LocLang.datatype"/>
        <xsd:attributeGroup ref="scxml.extra.attribs"/>
    </xsd:attributeGroup>
    <xsd:group name="scxml.param.content">
        <xsd:sequence>
            <xsd:group maxOccurs="unbounded" minOccurs="0" ref="scxml.extra.content"/>
        </xsd:sequence>
    </xsd:group>
    <xsd:complexType name="scxml.param.type">
        <xsd:group ref="scxml.param.content"/>
        <xsd:attributeGroup ref="scxml.param.attlist"/>
    </xsd:complexType>
    <xsd:element name="param" type="scxml.param.type"/>
    <!--  assign  -->
    <xsd:attributeGroup name="scxml.assign.attlist">
        <xsd:attribute name="location" type="LocLang.datatype" use="required"/>
        <xsd:attribute name="expr" type="ValueLang.datatype"/>
        <xsd:attribute default="replacechildren" name="type" type="AssignType.datatype"/>
        <xsd:attribute name="attr" type="xsd:NMTOKEN"/>
        <xsd:attributeGroup ref="scxml.extra.attribs"/>
    </xsd:attributeGroup>
    <xsd:group name="scxml.assign.content">
        <xsd:sequence>
            <xsd:any maxOccurs="unbounded" minOccurs="0" namespace="##any" processContents="lax"/>
        </xsd:sequence>
    </xsd:group>
    <xsd:complexType mixed="true" name="scxml.assign.type">
        <xsd:group ref="scxml.assign.content"/>
        <xsd:attributeGroup ref="scxml.assign.attlist"/>
    </xsd:complexType>
    <xsd:element name="assign" type="scxml.assign.type"/>
    <!-- script -->
    <xsd:attributeGroup name="scxml.script.attlist">
        <xsd:attribute name="src" type="URI.datatype"/>
        <xsd:attributeGroup ref="scxml.extra.attribs"/>
    </xsd:attributeGroup>
    <xsd:group name="scxml.script.content">
        <xsd:sequence>
            <xsd:group maxOccurs="unbounded" minOccurs="0" ref="scxml.extra.content"/>
        </xsd:sequence>
    </xsd:group>
    <xsd:complexType mixed="true" name="scxml.script.type">
        <xsd:group ref="scxml.script.content"/>
        <xsd:attributeGroup ref="scxml.script.attlist"/>
    </xsd:complexType>
    <xsd:element name="script" type="scxml.script.type"/>
    <!-- content -->
    <xsd:attributeGroup name="scxml.content.attlist">
        <xsd:attributeGroup ref="scxml.extra.attribs"/>
        <xsd:attribute name="expr" type="ValueLang.datatype"/>
    </xsd:attributeGroup>
    <xsd:group name="scxml.content.content">
        <xsd:sequence>
            <xsd:any maxOccurs="unbounded" minOccurs="0" namespace="##any" processContents="lax"/>
        </xsd:sequence>
    </xsd:group>
    <xsd:complexType mixed="true" name="scxml.content.type">
        <xsd:group ref="scxml.content.content"/>
        <xsd:attributeGroup ref="scxml.content.attlist"/>
    </xsd:complexType>
    <xsd:element name="content" type="scxml.content.type"/>
    <xsd:annotation>
        <xsd:documentation>         This is the XML Schema external module for SCXML         * send
            * cancel         * invoke         * finalize          The external module defines these
            elements and their         attributes.         </xsd:documentation>
        <xsd:documentation source="scxml-copyright.xsd"/>
    </xsd:annotation>
    <!-- send -->
    <xsd:attributeGroup name="scxml.send.attlist">
        <xsd:attribute name="event" type="EventType.datatype"/>
        <xsd:attribute name="eventexpr" type="ValueLang.datatype"/>
        <xsd:attribute name="target" type="URI.datatype"/>
        <xsd:attribute name="targetexpr" type="ValueLang.datatype"/>
        <xsd:attribute default="scxml" name="type" type="xsd:string"/>
        <xsd:attribute name="typeexpr" type="ValueLang.datatype"/>
        <xsd:attribute name="id" type="xsd:ID"/>
        <xsd:attribute name="idlocation" type="LocLang.datatype"/>
        <xsd:attribute default="0s" name="delay" type="Duration.datatype"/>
        <xsd:attribute name="delayexpr" type="ValueLang.datatype"/>
        <xsd:attribute name="namelist" type="xsd:string"/>
        <xsd:attributeGroup ref="scxml.extra.attribs"/>
    </xsd:attributeGroup>
    <xsd:group name="scxml.send.mix">
        <xsd:choice>
            <xsd:element maxOccurs="1" minOccurs="0" ref="content"/>
            <xsd:element maxOccurs="unbounded" minOccurs="0" ref="param"/>
            <xsd:group maxOccurs="unbounded" minOccurs="0" ref="scxml.extra.content"/>
        </xsd:choice>
    </xsd:group>
    <xsd:group name="scxml.send.content">
        <xsd:sequence>
            <xsd:group maxOccurs="unbounded" minOccurs="0" ref="scxml.send.mix"/>
        </xsd:sequence>
    </xsd:group>
    <xsd:complexType name="scxml.send.type">
        <xsd:group ref="scxml.send.content"/>
        <xsd:attributeGroup ref="scxml.send.attlist"/>
    </xsd:complexType>
    <xsd:element name="send" type="scxml.send.type"/>
    <!-- cancel -->
    <xsd:attributeGroup name="scxml.cancel.attlist">
        <xsd:attribute name="sendid" type="xsd:IDREF"/>
        <xsd:attribute name="sendidexpr" type="ValueLang.datatype"/>
        <xsd:attributeGroup ref="scxml.extra.attribs"/>
    </xsd:attributeGroup>
    <xsd:group name="scxml.cancel.mix">
        <xsd:sequence>
            <xsd:group maxOccurs="unbounded" minOccurs="0" ref="scxml.extra.content"/>
        </xsd:sequence>
    </xsd:group>
    <xsd:group name="scxml.cancel.content">
        <xsd:sequence>
            <xsd:group maxOccurs="unbounded" minOccurs="0" ref="scxml.cancel.mix"/>
        </xsd:sequence>
    </xsd:group>
    <xsd:complexType name="scxml.cancel.type">
        <xsd:group ref="scxml.cancel.content"/>
        <xsd:attributeGroup ref="scxml.cancel.attlist"/>
    </xsd:complexType>
    <xsd:element name="cancel" type="scxml.cancel.type"/>
    <!-- invoke -->
    <xsd:attributeGroup name="scxml.invoke.attlist">
        <xsd:attribute default="scxml" name="type" type="xsd:string"/>
        <xsd:attribute name="typeexpr" type="ValueLang.datatype"/>
        <xsd:attribute name="src" type="URI.datatype"/>
        <xsd:attribute name="srcexpr" type="ValueLang.datatype"/>
        <xsd:attribute name="id" type="xsd:ID"/>
        <xsd:attribute name="idlocation" type="LocLang.datatype"/>
        <xsd:attribute name="namelist" type="xsd:string"/>
        <xsd:attribute default="false" name="autoforward" type="Boolean.datatype" use="optional"/>
        <xsd:attributeGroup ref="scxml.extra.attribs"/>
    </xsd:attributeGroup>
    <xsd:group name="scxml.invoke.mix">
        <xsd:sequence>
            <xsd:element maxOccurs="1" minOccurs="0" ref="content"/>
            <xsd:element maxOccurs="unbounded" minOccurs="0" ref="param"/>
            <xsd:element maxOccurs="1" minOccurs="0" ref="finalize"/>
            <xsd:group maxOccurs="unbounded" minOccurs="0" ref="scxml.extra.content"/>
        </xsd:sequence>
    </xsd:group>
    <xsd:group name="scxml.invoke.content">
        <xsd:sequence>
            <xsd:group maxOccurs="unbounded" minOccurs="0" ref="scxml.invoke.mix"/>
        </xsd:sequence>
    </xsd:group>
    <xsd:complexType name="scxml.invoke.type">
        <xsd:group ref="scxml.invoke.content"/>
        <xsd:attributeGroup ref="scxml.invoke.attlist"/>
    </xsd:complexType>
    <xsd:element name="invoke" type="scxml.invoke.type"/>
    <!-- finalize -->
    <xsd:attributeGroup name="scxml.finalize.attlist">
        <xsd:attributeGroup ref="scxml.extra.attribs"/>
    </xsd:attributeGroup>
    <xsd:group name="scxml.finalize.mix">
        <xsd:sequence>
            <xsd:group ref="scxml.core.executablecontent"/>
        </xsd:sequence>
    </xsd:group>
    <xsd:group name="scxml.finalize.content">
        <xsd:sequence>
            <xsd:group maxOccurs="unbounded" minOccurs="0" ref="scxml.finalize.mix"/>
        </xsd:sequence>
    </xsd:group>
    <xsd:complexType name="scxml.finalize.type">
        <xsd:group ref="scxml.finalize.content"/>
        <xsd:attributeGroup ref="scxml.finalize.attlist"/>
    </xsd:complexType>
    <xsd:element name="finalize" type="scxml.finalize.type"/>
    <!-- the various elements of executable content are defined in the relevant modules.
This gathers them up into a single type -->
    <xsd:group name="scxml.core.executablecontent">
        <xsd:choice>
            <xsd:group maxOccurs="unbounded" minOccurs="0" ref="scxml.extra.content"/>
            <xsd:element ref="raise"/>
            <xsd:element ref="if"/>
            <xsd:element ref="foreach"/>
            <xsd:element ref="send"/>
            <xsd:element ref="script"/>
            <xsd:element ref="assign"/>
            <xsd:element ref="log"/>
            <xsd:element ref="cancel"/>
        </xsd:choice>
    </xsd:group>
</xsd:schema>
