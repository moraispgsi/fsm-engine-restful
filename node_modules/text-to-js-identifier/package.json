{
  "_args": [
    [
      {
        "raw": "text-to-js-identifier@0.0.4",
        "scope": null,
        "escapedName": "text-to-js-identifier",
        "name": "text-to-js-identifier",
        "rawSpec": "0.0.4",
        "spec": "0.0.4",
        "type": "version"
      },
      "C:\\Users\\Ricardo Morais\\Desktop\\INSTICC\\PFC\\Projeto final\\FSM\\FSM Engine RESTful\\fsm-engine-restful\\node_modules\\scxml"
    ]
  ],
  "_defaultsLoaded": true,
  "_engineSupported": true,
  "_from": "text-to-js-identifier@0.0.4",
  "_id": "text-to-js-identifier@0.0.4",
  "_inCache": true,
  "_location": "/text-to-js-identifier",
  "_nodeVersion": "v0.6.8",
  "_npmUser": {
    "name": "benekastah",
    "email": "benekastah@gmail.com"
  },
  "_npmVersion": "1.1.13",
  "_phantomChildren": {},
  "_requested": {
    "raw": "text-to-js-identifier@0.0.4",
    "scope": null,
    "escapedName": "text-to-js-identifier",
    "name": "text-to-js-identifier",
    "rawSpec": "0.0.4",
    "spec": "0.0.4",
    "type": "version"
  },
  "_requiredBy": [
    "/scxml"
  ],
  "_resolved": "https://registry.npmjs.org/text-to-js-identifier/-/text-to-js-identifier-0.0.4.tgz",
  "_shasum": "74390a195846a7afe310dc30bcb0febc0135997d",
  "_shrinkwrap": null,
  "_spec": "text-to-js-identifier@0.0.4",
  "_where": "C:\\Users\\Ricardo Morais\\Desktop\\INSTICC\\PFC\\Projeto final\\FSM\\FSM Engine RESTful\\fsm-engine-restful\\node_modules\\scxml",
  "author": {
    "name": "Paul Harper",
    "email": "benekastah@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/benekastah/text-to-js-identifier/issues"
  },
  "dependencies": {},
  "description": "Turn arbitrary text to a valid javascript identifier",
  "devDependencies": {
    "coffee-script": "1.x.x"
  },
  "directories": {},
  "dist": {
    "shasum": "74390a195846a7afe310dc30bcb0febc0135997d",
    "tarball": "https://registry.npmjs.org/text-to-js-identifier/-/text-to-js-identifier-0.0.4.tgz"
  },
  "ender": "./index.js",
  "engines": {
    "node": "0.6.x"
  },
  "homepage": "https://github.com/benekastah/text-to-js-identifier#readme",
  "keywords": [
    "parser",
    "compiler"
  ],
  "maintainers": [
    {
      "name": "benekastah",
      "email": "benekastah@gmail.com"
    }
  ],
  "name": "text-to-js-identifier",
  "optionalDependencies": {},
  "readme": "# Text to JS Identifier\n\nTurn arbitrary text into a valid javascript identifier.\n\nI found this code useful as I have been experimenting with building languages that compile into javascript in my spare time. Often I prefer to use identifiers that allow more characters that javascript does.\n\n## Use\n\n### npm\n\nIf you are using node.js, install with npm:\n\n```\n$ npm install text-to-js-identifier\n```\n\nthen use it in your file like so:\n\n```\nvar to_js_identifier = require(\"text-to-js-identifier\");\nto_js_identifier(\"hey!\"); // -> \"hey_$exclamationmark_\"\n```\n\n### ender\n\nIf you are using [ender](http://ender.no.de/), then add it to your library:\n\n```\n$ ender add text-to-js-identifier\n```\n\nand use it like this:\n\n```\n$.to_js_identifier(\"bool?\"); // -> \"bool_$questionmark_\"\n```\n\n### other\n\nIf you aren't using node or ender, then the function can be found in your global scope after you have downloaded and included your file:\n\n```\nto_js_identifier(\"pretty easy\"); // -> \"pretty_$space_easy\"\n```\n\n## Technical Details\n\nIf your text happens to be a javascript keyword, then the keyword will be wrapped in `_$` and `_` (in fact, all replaced values are wrapped this way):\n\n```\nin            -> _$in_\nthrow         -> _$throw_\nfunction      -> _$function_\n```\n\nIf your text contains an invalid character, it will in most cases be replaced by a human-readable and javascript-compatable representation of that character:\n\n```\n-             -> _$dash_\n.             -> _$period_\n~             -> _$tilde_\n```\n\nIf we don't have a handy human-readable representation on hand, we just display the ASCII character code:\n\n```\n0             -> _$ASCII_48_\n†             -> _$ASCII_8224_\nƒ             -> _$ASCII_402_\n```\n\nIf the text contains a part that is wrapped in `_$` and `_` (in other words, if it looks like a generated identifier), we will escape that with another set of wrappings. This is so that it is not possible to have two bits of different text generate the same identifier:\n\n```\n_$hey_        -> _$_$hey__\n_$in_         -> _$_$in__\n_$ASCII_402_  -> _$_$ASCII_402__\n```\n\nAll text that is already valid will simply pass through unchanged:\n\n```\nhey           -> hey\n?wassup       -> _$questionmark_wassup\netc.          -> etc_$period_\nhey,you       -> hey_$comma_you\n```\n\nAs you can see, replacement values can go anywhere. Any ASCII-compatable string should generate a valid javascript identifier.",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/benekastah/text-to-js-identifier.git"
  },
  "version": "0.0.4",
  "warnings": [
    {
      "code": "ENOTSUP",
      "required": {
        "node": "0.6.x"
      },
      "pkgid": "text-to-js-identifier@0.0.4"
    }
  ]
}
